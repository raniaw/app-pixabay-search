{"version":3,"sources":["Component/InputField.js","Component/Images.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","type","placeholder","onChange","change","onClick","click","Images","state","url","isLoading","fetchedData","console","log","this","setState","fetch","then","response","json","data","hits","loading","imgArr","className","length","map","item","index","key","href","largeImageURL","target","src","webformatURL","alt","tags","title","Component","App","saveQuery","e","preventDefault","query","value","letSearch","searchImages","words","split","newUrl","root","forEach","loadedImages","loadImage","newImages","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAEe,SAASA,EAAWC,GAC/B,OACI,6BACI,2BAAOC,KAAK,OAAOC,YAAY,eAAeC,SAAUH,EAAMI,SAC9D,4BAAQC,QAASL,EAAMM,OAAvB,mB,ICJSC,E,YAEjB,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAEDQ,MAAQ,CACXC,IAAI,GACJC,UAAU,QACVC,YAAY,IANG,E,iFAkBE,IAAD,OAChBC,QAAQC,IAAI,8BACZC,KAAKC,SAAS,CAACL,WAAU,IACzB,IAAMD,EAAIK,KAAKN,MAAMC,IACrBG,QAAQC,IAAI,OAAQJ,GAEpBO,MAAMP,GACLQ,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACHR,QAAQC,IAAIO,GACZ,EAAKL,SAAS,CACVJ,YAAYS,EAAKC,KACjBX,WAAU,S,+BAOlB,IACIY,EADAC,EAAO,GA6BX,OA3BGT,KAAKN,MAAME,YACVY,EAAQ,6BACJ,0CACA,yBAAKE,UAAU,cAIpBV,KAAKN,MAAMG,YAAYc,OAAO,IAC7BF,EAAOT,KAAKN,MAAMG,YAAYe,KAAI,SAACC,EAAKC,GAMpC,OAEI,yBAAKC,IAAKD,EAAOJ,UAAU,UAEvB,uBAAGM,KAAMH,EAAKI,cAAeC,OAAO,UAEhC,yBAAKC,IAAKN,EAAKO,aAAeC,IAAKR,EAAKS,KAAMC,MAAOV,EAAKS,aAS1E,yBAAKZ,UAAU,UACVF,EACAC,M,gDA9DmBvB,EAAOQ,GACnC,OAAGA,EAAMC,MAAMT,EAAMS,IACTD,EAAMC,IAAIT,EAAMS,IAEjB,S,GAhBiB6B,aCGfC,G,kBACnB,WAAYvC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRwC,UAAU,SAACC,GACTA,EAAEC,iBACF,EAAK3B,SAAS,CACZ4B,MAAMF,EAAET,OAAOY,MACfC,WAAU,KAjBK,EAqBnBC,aAAa,WAEX,IAAIC,EAAO,EAAKvC,MAAMmC,MAAMK,MAAM,KAG9BC,EAAS,EAAKzC,MAAM0C,KAAK,QAAQ,EAAK1C,MAAMqB,IAAI,mBACpDkB,EAAMI,SAAQ,SAACxB,GACbsB,GAAQtB,EAAK,IACbf,QAAQC,IAAIoC,MAEd,EAAKlC,SAAS,CACZN,IAAIwC,EACJJ,WAAU,EACVO,aAAa,QAlCE,EAuCnBC,UAAU,WACR,IAAIC,EAAU,kBAAC,EAAD,CAAQ7C,IAAK,EAAKD,MAAMC,MACtC,EAAKM,SAAS,CAACqC,aAAaE,EAAWT,WAAU,KAtCjD,EAAKrC,MAAQ,CACV0C,KAAK,2BACLrB,IAAI,qCACJc,MAAM,GACNlC,IAAI,GACJoC,WAAW,EACXO,aAAa,MATC,E,sEAgDjB,OAHGtC,KAAKN,MAAMqC,WACZ/B,KAAKuC,YAGL,yBAAK7B,UAAU,OACb,kBAACzB,EAAD,CAAYK,OAAQU,KAAK0B,UAAWlC,MAAOQ,KAAKgC,eAC/ChC,KAAKN,MAAM4C,kB,GApDad,cCObiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,iB","file":"static/js/main.884261e7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function InputField(props) {\n    return (\n        <div>\n            <input type=\"text\" placeholder=\"example: SKY\" onChange={props.change}></input>\n            <button onClick={props.click}>Search Picture</button>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\n\nexport default class Images extends Component {\n\n    constructor(props) {\n      super(props)\n    \n      this.state = {\n        url:\"\",\n        isLoading:\"false\",\n        fetchedData:[]\n      }\n    }\n    \n    static getDerivedStateFromProps(props, state) {\n        if(state.url!==props.url){\n            return (state.url=props.url);\n        }else{\n            return null;\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"component Images Did Mount\");\n        this.setState({isLoading:true});\n        const url=this.state.url;\n        console.log(\"url \", url);\n        \n        fetch(url)\n        .then((response)=>{\n            return(response.json())\n        })\n        .then((data)=>{\n            console.log(data);\n            this.setState({\n                fetchedData:data.hits,\n                isLoading:false\n            })\n        })\n    }\n    \n\n    render() {\n        let imgArr=[];\n        let loading;\n        if(this.state.isLoading){\n            loading=<div>\n                <h5>loading...</h5>\n                <div className=\"loadDiv\"></div>\n            </div>\n        }\n\n        if(this.state.fetchedData.length>0){\n            imgArr=this.state.fetchedData.map((item,index)=>{\n                // let style={\n                //     // width:item.previewWidth,\n                //     // height: item.previewHeight,\n                //     // display: 'inline-block'\n                // }\n                return (\n            \n                    <div key={index} className=\"images\">\n                      {/* <div key={index} style={style}></div> */}\n                        <a href={item.largeImageURL} target=\"_blank\">\n                            {/* <img src={item.previewURL}  /> */}\n                            <img src={item.webformatURL}  alt={item.tags} title={item.tags}/>\n                            {/* <img src={item.largeImageURL}  /> */}\n                        </a>   \n                    </div>\n                )\n            })\n        }\n        return (\n            \n            <div className=\"images\">\n                {loading}\n                {imgArr}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport InputField from './Component/InputField';\nimport Images from './Component/Images.js';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       root:\"https://pixabay.com/api/\",\n       key:\"13971465-385285dab261de63e94c9104c\",\n       query:\"\",\n       url:\"\",\n       letSearch: false,\n       loadedImages:null\n    }\n  }\n\n  saveQuery=(e)=>{\n    e.preventDefault();\n    this.setState({\n      query:e.target.value, \n      letSearch:false\n    })\n  }\n  \n  searchImages=()=>{\n    //\"flower rose\" => [\"flower\",\"rose\"]\n    let words= this.state.query.split(\" \");\n\n    //https://pixabay.com/api/?key=13971465-385285dab261de63e94c9104c&q=flower+rose+\n    let newUrl = this.state.root+\"?key=\"+this.state.key+\"&per_page=200&q=\";\n    words.forEach((item)=>{\n      newUrl+=item+\"+\";\n      console.log(newUrl);\n    })\n    this.setState({\n      url:newUrl,\n      letSearch:true,\n      loadedImages:null\n    })\n  }\n\n\n  loadImage=()=>{\n    let newImages=<Images url={this.state.url}/>;\n    this.setState({loadedImages:newImages, letSearch:false})\n  }\n\n  render() {\n    if(this.state.letSearch){\n      this.loadImage();\n    }\n    return (\n      <div className=\"App\">\n        <InputField change={this.saveQuery} click={this.searchImages}/>\n        {this.state.loadedImages}\n      </div>\n    )\n  }\n}\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}